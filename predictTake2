#more info here https://wordpress.com/view/summerliketheseasoncom.wordpress.com
#listen to generated sounds https://soundcloud.com/summer-554845429/sets

""" This module generates notes for a midi file using the
    trained neural network """
import pickle
import numpy
from music21 import instrument, note, stream, chord
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import BatchNormalization as BatchNorm
from keras.layers import Activation
from keras.optimizers import RMSprop

def generate():
    """ Generate a piano midi file """
    #load the notes used to train the model
    with open('data/notes', 'rb') as filepath:
        notes = pickle.load(filepath)

    # Get all pitch names
    pitchnames = sorted(set(item for item in notes))
    # Get all pitch names
    n_vocab = len(set(notes))

    network_input, normalized_input = prepare_sequences(notes, pitchnames, n_vocab)
    model = create_network(normalized_input, n_vocab)
    prediction_output = generate_notes(model, network_input, pitchnames, n_vocab)
    create_midi(prediction_output)

def prepare_sequences(notes, pitchnames, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    # map between notes and integers and back
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    sequence_length = 100
    network_input = []
    output = []
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)

    # reshape the input into a format compatible with LSTM layers
    normalized_input = numpy.reshape(network_input, (n_patterns, sequence_length, 1))
    # normalize input
    normalized_input = normalized_input / float(n_vocab)

    return (network_input, normalized_input)

def create_network(network_input, n_vocab):
    """ create the structure of the neural network """
    
    model = Sequential()
    model.add(LSTM(512, input_shape=(network_input.shape[1], network_input.shape[2]), return_sequences=True))
    model.add(Dropout(0.3))
    model.add(LSTM(512, return_sequences=True))
    model.add(Dropout(0.3))
    model.add(LSTM(512))
    model.add(Dense(256))  # Reduce the number of units in the dense layer
    model.add(Dropout(0.3))
    model.add(Dense(n_vocab))
    model.add(Activation('softmax'))
    # Change learning rate in RMSprop optimizer
    model.compile(loss='categorical_crossentropy', optimizer=RMSprop(lr=0.001), metrics=["accuracy"])
    # Load the weights to each node
    model.load_weights('weights-improvement-164-1.5737-0.6734-bigger.hdf5')

    return model

def generate_notes(model, network_input, pitchnames, n_vocab):
    """ Generate notes and chords from the neural network based on a sequence of notes with velocity """
    start = numpy.random.randint(0, len(network_input)-1)

    int_to_note = dict((number, element) for number, element in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    for note_index in range(500):
        prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        index = numpy.argmax(prediction)
        result = int_to_note[index]

        if '.' in result:
            # If the result is a chord with velocity
            chord_elements = result.split('.')
            notes_in_chord = []
            velocities_in_chord = []
            for elem in chord_elements:
                split_result = elem.split('_')
                if len(split_result) == 2:
                    pitch, velocity = split_result
                    notes_in_chord.append(pitch)
                    velocities_in_chord.append(int(velocity))
            if notes_in_chord:
                chord_notes = chord.Chord(notes_in_chord)
                chord_notes.volume.velocity = int(sum(velocities_in_chord) / len(velocities_in_chord))
                prediction_output.append(chord_notes)
                print("new chord", chord_notes)
        else:
            # If the result is a single note with velocity
            split_result = result.split('_')
            if len(split_result) == 2:
                pitch, velocity = split_result
                new_note = note.Note(pitch)
                new_note.volume.velocity = int(velocity)
                prediction_output.append(new_note)
                print("new note", new_note)

        pattern = numpy.append(pattern, index)
        pattern = pattern[1:]

    return prediction_output

def create_midi(prediction_output):
    """ Convert the output from the prediction to notes and create a midi file
    from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model 
    for pattern in prediction_output:
        # Check if the pattern is a Note object
        if isinstance(pattern, note.Note):
            new_note = pattern
            new_note.offset = offset
            output_notes.append(new_note)
        elif isinstance(pattern, chord.Chord):
            # Handle chords
            new_chord = pattern
            new_chord.offset = offset
            output_notes.append(new_chord)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp='output.mid')

if __name__ == '__main__':
    generate()
